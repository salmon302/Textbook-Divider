#!/usr/bin/env python3

import os
import psutil
from pathlib import Path
import json
import PyPDF2
import re
import logging
from pdfminer.high_level import extract_text
from pdf2image import convert_from_path
import pytesseract
import numpy as np
import cv2

# Configure logger
logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.DEBUG)

class PDFProcessor:
	def __init__(self, file_path: Path):
		self.file_path = file_path
		self.chapters = []
		self.max_pages = 50
		self.max_memory_mb = 2048
		self.temp_files = []
		self.features_detected = {
			"mathematical_notation": False,
			"musical_notation": False,
			"complex_figures": False,
			"tables": False,
			"exercises": False,
			"theorem_blocks": False,
			"technical_diagrams": False,
			"mathematical_formulas": False,
			"multilevel_structure": False
		}
		self.accuracy_metrics = {
			"text_accuracy": 0.0,
			"mathematical_notation": 0.0,
			"musical_notation": 0.0,
			"figure_detection": 0.0,
			"table_detection": 0.0
		}

	def detect_features(self, text: str, page_image=None) -> None:
		"""Enhanced feature detection with improved patterns"""
		# Mathematical formulas detection
		formula_patterns = [
			r'[∫∑∏√∆∇]',
			r'\$.*?\$',
			r'\\begin\{equation\}.*?\\end\{equation\}',
			r'\\[a-zA-Z]+\{.*?\}',
			r'\b[a-z]\([xy]\)',
			r'(?:\d+[\+\-\*/]\d+\s*=)',
			r'\b(sin|cos|tan|log|ln|exp)\b',
			r'[α-ωΑ-Ω]'
		]
		
		# Check for mathematical formulas
		for pattern in formula_patterns:
			if re.search(pattern, text, re.MULTILINE | re.DOTALL):
				self.features_detected["mathematical_formulas"] = True
				self.features_detected["mathematical_notation"] = True
				break

		# Musical notation detection
		music_patterns = [
			r'♩|♪|♫|♬',
			r'\b(tempo|allegro|andante|forte|piano)\b',
			r'(?i)(sharp|flat|natural|key signature)',
			r'[A-G](?:#|b)?(?:maj|min|dim|aug)'
		]
		for pattern in music_patterns:
			if re.search(pattern, text, re.IGNORECASE):
				self.features_detected["musical_notation"] = True
				break

		# Exercise detection
		exercise_patterns = [
			r'\b(?:exercise|problem|question)\s+\d+',
			r'^\s*\d+\.\s*(?:[A-Za-z]|\()',
			r'\b(?:solve|calculate|prove|show that)\b'
		]
		for pattern in exercise_patterns:
			if re.search(pattern, text, re.IGNORECASE):
				self.features_detected["exercises"] = True
				break

		# Theorem block detection
		theorem_patterns = [
			r'\b(?:theorem|lemma|corollary|proof)\s*\d*\s*[:.)]',
			r'\\begin\{theorem\}',
			r'Q\.?E\.?D\.?'
		]
		for pattern in theorem_patterns:
			if re.search(pattern, text, re.IGNORECASE):
				self.features_detected["theorem_blocks"] = True
				break

		# Table detection
		table_patterns = [
			r'\|[-+]+\|',
			r'[+\-]+[+\|][+\-]+',
			r'\\begin\{table\}',
			r'\b(?:table|tabular)\s+\d+[:.)]'
		]
		for pattern in table_patterns:
			if re.search(pattern, text):
				self.features_detected["tables"] = True
				break

		# Complex figures and technical diagrams detection
		if page_image is not None:
			# Convert to grayscale
			gray = cv2.cvtColor(page_image, cv2.COLOR_BGR2GRAY)
			
			# Edge detection
			edges = cv2.Canny(gray, 50, 150)
			
			# Count non-zero pixels in edges
			edge_pixels = np.count_nonzero(edges)
			
			# If there are significant edges, mark as having complex figures
			if edge_pixels > (page_image.shape[0] * page_image.shape[1] * 0.1):
				self.features_detected["complex_figures"] = True
				self.features_detected["technical_diagrams"] = True

		# Multilevel structure detection
		multilevel_patterns = [
			r'\d+\.\d+\.\d+',
			r'[A-Z]\.\d+\.[a-z]',
			r'(?i)chapter\s+\d+\.\d+'
		]
		for pattern in multilevel_patterns:
			if re.search(pattern, text):
				self.features_detected["multilevel_structure"] = True
				break

	def process(self, max_pages=None) -> dict:
		"""Process PDF file and extract chapters with features"""
		try:
			logger.info(f"Processing PDF: {self.file_path}")
			with open(self.file_path, 'rb') as file:
				pdf = PyPDF2.PdfReader(file)
				total_pages = len(pdf.pages)
				pages_to_process = min(max_pages if max_pages is not None else self.max_pages, total_pages)
				logger.info(f"Total pages: {total_pages}, Processing: {pages_to_process}")

				# Process pages
				for page_num in range(pages_to_process):
					text = self.extract_text_with_fallback(page_num)
					if text.strip():
						logger.debug(f"Page {page_num + 1} content sample:\n{text[:200]}...")
						self.detect_features(text)
						new_chapters = self.detect_chapters(text, page_num)
						self.chapters.extend(new_chapters)
					else:
						logger.warning(f"No text extracted from page {page_num + 1}")

				# Sort chapters by page number and then by chapter number
				self.chapters.sort(key=lambda x: (
					x['page'], 
					float(x['number']) if x['number'].replace('.', '').isdigit() else float('inf')
				))

				return {
					"title": self.file_path.stem,
					"chapters": self.chapters,
					"metadata": {
						"total_pages": total_pages,
						"pages_processed": pages_to_process,
						"features_detected": self.features_detected,
						"extraction_success": True,
						"accuracy_metrics": self.accuracy_metrics
					}
				}
		except Exception as e:
			raise ValueError(f"Error processing PDF: {str(e)}")
		finally:
			self.cleanup()