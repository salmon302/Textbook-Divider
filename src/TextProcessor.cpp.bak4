#include "TextProcessor.h"
#include <sstream>
#include <algorithm>
#include <regex>
#include <unordered_map>

std::string TextProcessor::cleanText(const std::string& text) {
	std::string result = text;
	result = preserveMathFormulas(result);
	result = fixCommonOCRErrors(result);
	result = removeOCRArtifacts(result);
	// Don't remove extra whitespace as it interferes with newline preservation
	return result;
}


std::string TextProcessor::formatText(const std::string& text) {
	std::istringstream stream(text);
	std::string line;
	std::string result;
	std::regex tablePattern(R"((?:Table|Figure)\s+\d+[.:].*)");
	std::regex chapterPattern(R"(Chapter\s+[IVX]+:)");
	bool firstLine = true;
	bool afterTable = false;
	
	while (std::getline(stream, line)) {
		if (!line.empty()) {
			if (!firstLine) {
				if (std::regex_match(line, tablePattern)) {
					result += "\n\n" + line + "\n";
					afterTable = true;
				} else if (afterTable) {
					result += "\n" + line;
					afterTable = false;
				} else {
					result += (result.empty() || result.back() == '\n' ? "" : " ") + line;
				}
			} else {
				if (std::regex_match(line, chapterPattern)) {
					result += line + "\n";
				} else {
					result += line;
				}
				firstLine = false;
			}
		} else if (!result.empty()) {
			if (result.back() != '\n') {
				result += "\n\n";
			} else if (result.length() >= 2 && result[result.length()-2] != '\n') {
				result += "\n";
			}
		}
	}
	
	// Ensure final newline
	if (!result.empty() && result.back() != '\n') {
		result += '\n';
	}
	
	return result;
}

std::string TextProcessor::removeOCRArtifacts(const std::string& text) {
	std::string cleaned;
	bool lastWasSpace = false;
	
	for (size_t i = 0; i < text.length(); i++) {
		unsigned char c = static_cast<unsigned char>(text[i]);
		
		// Handle form feed character
		if (c == '\x0C') {
			cleaned += "\n";
			lastWasSpace = false;
			continue;
		}
		
		// Handle special characters
		if ((c >= 0x80) || (c < 0x20 && c != '\n' && c != '\t')) {
			if (!lastWasSpace) {
				cleaned += ' ';
				lastWasSpace = true;
			}
			continue;
		}
		
		// Handle regular characters
		if (c == '\n') {
			cleaned += "\n";
			lastWasSpace = false;
		} else if (std::isspace(c)) {
			if (!lastWasSpace) {
				cleaned += ' ';
				lastWasSpace = true;
			}
		} else {
			if (!lastWasSpace && cleaned.length() > 0 && cleaned.back() == '\n') {
				cleaned += ' ';
			}
			cleaned += c;
			lastWasSpace = false;
		}
	}
	
	return cleaned;



}

std::string TextProcessor::removeExtraWhitespace(const std::string& text) {
	std::string cleaned;
	bool lastWasSpace = true;  // Start with true to trim leading spaces
	bool inNewline = false;
	
	for (size_t i = 0; i < text.length(); i++) {
		char c = text[i];
		
		if (c == '\n') {
			cleaned += c;
			lastWasSpace = true;
			inNewline = true;
		} else if (std::isspace(c)) {
			if (!lastWasSpace && !inNewline) {
				cleaned += ' ';
				lastWasSpace = true;
			}
		} else {
			if (inNewline) {
				cleaned += ' ';
				inNewline = false;
			}
			cleaned += c;
			lastWasSpace = false;
		}
	}
	
	// Remove trailing space if present
	while (!cleaned.empty() && cleaned.back() == ' ') {
		cleaned.pop_back();
	}
	
	return cleaned;
}



std::string TextProcessor::fixCommonOCRErrors(const std::string& text) {
	std::string fixed = text;
	std::vector<std::pair<std::regex, std::string>> corrections = {
		{std::regex(R"(\bl\b)"), "I"},
		{std::regex(R"(rn[O0]use)"), "mouse"},
		{std::regex(R"(rnouse)"), "mouse"},
		{std::regex(R"(rn\b)"), "m"},
		{std::regex(R"(\b0\b)"), "O"},
		{std::regex(R"(\|)"), "I"}
	};
	
	for (const auto& [pattern, replacement] : corrections) {
		fixed = std::regex_replace(fixed, pattern, replacement);
	}
	return fixed;
}

std::string TextProcessor::preserveMathFormulas(const std::string& text) {
	std::string result;
	bool inFormula = false;
	
	for (char c : text) {
		if (c == '$') {
			inFormula = !inFormula;
		}
		result += c;
	}
	
	return result;
}

std::string TextProcessor::formatParagraphs(const std::string& text) {
	return text;
}

std::string TextProcessor::handleTablesFigures(const std::string& text) {
	return text;
}